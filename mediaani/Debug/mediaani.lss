
mediaani.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000033e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  0080010a  0080010a  000003dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007cc  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a4  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b8  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000376  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a1  00000000  00000000  00001966  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001b07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  9e:	0c 94 9d 01 	jmp	0x33a	; 0x33a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <medfilter>:
}



int medfilter(int datum)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
	/* previous value of scan */
	struct pair *scanold     ;
	/* pointer to median */
	struct pair *median;     ;
	/* No stoppers allowed. */
	if(datum == STOPPER) datum = STOPPER + 1;
  ae:	00 97       	sbiw	r24, 0x00	; 0
  b0:	11 f4       	brne	.+4      	; 0xb6 <medfilter+0x10>
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
	/* increment and wrap data in pointer.*/
	
	if( (++datpoint - buffer) >= NWIDTH) datpoint=buffer;
  b6:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <datpoint.1860>
  ba:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <datpoint.1860+0x1>
  be:	2c 5f       	subi	r18, 0xFC	; 252
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	a9 01       	movw	r20, r18
  c4:	4e 50       	subi	r20, 0x0E	; 14
  c6:	51 40       	sbci	r21, 0x01	; 1
  c8:	4c 32       	cpi	r20, 0x2C	; 44
  ca:	51 05       	cpc	r21, r1
  cc:	2c f4       	brge	.+10     	; 0xd8 <medfilter+0x32>
  ce:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <datpoint.1860+0x1>
  d2:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <datpoint.1860>
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <medfilter+0x3e>
  d8:	2e e0       	ldi	r18, 0x0E	; 14
  da:	31 e0       	ldi	r19, 0x01	; 1
  dc:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <datpoint.1860+0x1>
  e0:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <datpoint.1860>
	/* Copy in new datum */
	datpoint->value=datum        ;
  e4:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <datpoint.1860>
  e8:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <datpoint.1860+0x1>
  ec:	9b 83       	std	Y+3, r25	; 0x03
  ee:	8a 83       	std	Y+2, r24	; 0x02
	/* save pointer to old value's successor */
	successor=datpoint->point    ;
  f0:	68 81       	ld	r22, Y
  f2:	79 81       	ldd	r23, Y+1	; 0x01
	/* median initially just before head of chain */
	median = &big                ;
	/* scanold initially points to scan pointer. */
	scanold = &big               ;
	/* points to first (largest) datum in chain */
	scan = big.point             ;
  f4:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <big.1862>
  f8:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <big.1862+0x1>
	/* Copy in new datum */
	datpoint->value=datum        ;
	/* save pointer to old value's successor */
	successor=datpoint->point    ;
	/* median initially just before head of chain */
	median = &big                ;
  fc:	24 e0       	ldi	r18, 0x04	; 4
  fe:	31 e0       	ldi	r19, 0x01	; 1
	/* scanold initially points to scan pointer. */
	scanold = &big               ;
 100:	d9 01       	movw	r26, r18
		{
			/* chain it in here.  */
			datpoint->point = scanold->point;
			/* mark it chained in. */
			scanold->point = datpoint;
			datum = 0;
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	10 e0       	ldi	r17, 0x00	; 0

	for( ; ; )
	{
		/* Handle odd-numbered item in chain  */
		/* Chain out the old datum.*/
		if( scan->point == datpoint ) scan->point = successor;
 106:	40 81       	ld	r20, Z
 108:	51 81       	ldd	r21, Z+1	; 0x01
 10a:	c4 17       	cp	r28, r20
 10c:	d5 07       	cpc	r29, r21
 10e:	11 f4       	brne	.+4      	; 0x114 <medfilter+0x6e>
 110:	71 83       	std	Z+1, r23	; 0x01
 112:	60 83       	st	Z, r22
		/* If datum is larger than scanned value,*/
		if( (scan->value
 114:	42 81       	ldd	r20, Z+2	; 0x02
 116:	53 81       	ldd	r21, Z+3	; 0x03
 118:	48 17       	cp	r20, r24
 11a:	59 07       	cpc	r21, r25
 11c:	48 f4       	brcc	.+18     	; 0x130 <medfilter+0x8a>
		<
		datum) )
		{
			/* chain it in here.  */
			datpoint->point = scanold->point;
 11e:	8d 91       	ld	r24, X+
 120:	9c 91       	ld	r25, X
 122:	11 97       	sbiw	r26, 0x01	; 1
 124:	99 83       	std	Y+1, r25	; 0x01
 126:	88 83       	st	Y, r24
			/* mark it chained in. */
			scanold->point = datpoint;
 128:	cd 93       	st	X+, r28
 12a:	dc 93       	st	X, r29
			datum = 0;
 12c:	80 2f       	mov	r24, r16
 12e:	91 2f       	mov	r25, r17
			
		};
		/* Step median pointer down chain after doing odd-numbered element */
		/* Step median pointer.  */
		median = median->point       ;
 130:	d9 01       	movw	r26, r18
 132:	2d 91       	ld	r18, X+
 134:	3c 91       	ld	r19, X
		/* Break at end of chain  */
		if ( scan == &small ) break ;
 136:	b1 e0       	ldi	r27, 0x01	; 1
 138:	ea 30       	cpi	r30, 0x0A	; 10
 13a:	fb 07       	cpc	r31, r27
 13c:	11 f1       	breq	.+68     	; 0x182 <medfilter+0xdc>
		/* Save this pointer and   */
		scanold = scan ;
		/* step down chain */
		scan = scan->point ;
 13e:	a0 81       	ld	r26, Z
 140:	b1 81       	ldd	r27, Z+1	; 0x01
		/* Handle even-numbered item. As above without the median step.  */
		if(
 142:	4d 91       	ld	r20, X+
 144:	5c 91       	ld	r21, X
 146:	11 97       	sbiw	r26, 0x01	; 1
 148:	c4 17       	cp	r28, r20
 14a:	d5 07       	cpc	r29, r21
 14c:	19 f4       	brne	.+6      	; 0x154 <medfilter+0xae>
		scan->point == datpoint ) scan->point = successor;
 14e:	11 96       	adiw	r26, 0x01	; 1
 150:	7c 93       	st	X, r23
 152:	6e 93       	st	-X, r22
		if( (scan->value
 154:	12 96       	adiw	r26, 0x02	; 2
 156:	4d 91       	ld	r20, X+
 158:	5c 91       	ld	r21, X
 15a:	13 97       	sbiw	r26, 0x03	; 3
 15c:	48 17       	cp	r20, r24
 15e:	59 07       	cpc	r21, r25
 160:	40 f4       	brcc	.+16     	; 0x172 <medfilter+0xcc>
		<
		datum) )
		{
			datpoint->point = scanold->point;
 162:	80 81       	ld	r24, Z
 164:	91 81       	ldd	r25, Z+1	; 0x01
 166:	99 83       	std	Y+1, r25	; 0x01
 168:	88 83       	st	Y, r24
			scanold->point = datpoint;
 16a:	d1 83       	std	Z+1, r29	; 0x01
 16c:	c0 83       	st	Z, r28
			datum = 0;
 16e:	80 2f       	mov	r24, r16
 170:	91 2f       	mov	r25, r17
		};
		if ( scan == &small ) break;
 172:	e1 e0       	ldi	r30, 0x01	; 1
 174:	aa 30       	cpi	r26, 0x0A	; 10
 176:	be 07       	cpc	r27, r30
 178:	21 f0       	breq	.+8      	; 0x182 <medfilter+0xdc>
		scanold = scan ;
		scan = scan->point;
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
	};
 180:	c2 cf       	rjmp	.-124    	; 0x106 <medfilter+0x60>
	return( median->value );
 182:	d9 01       	movw	r26, r18
 184:	12 96       	adiw	r26, 0x02	; 2
 186:	8d 91       	ld	r24, X+
 188:	9c 91       	ld	r25, X
 18a:	13 97       	sbiw	r26, 0x03	; 3
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <main>:

int medfilter(int datum);


int main(void)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ca e0       	ldi	r28, 0x0A	; 10
 19c:	d0 e0       	ldi	r29, 0x00	; 0
    for (int i = 1; i < NWIDTH; i++) {
		medfilter(rand());
 19e:	0e 94 2a 01 	call	0x254	; 0x254 <rand>
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <medfilter>
 1a6:	21 97       	sbiw	r28, 0x01	; 1
int medfilter(int datum);


int main(void)
{
    for (int i = 1; i < NWIDTH; i++) {
 1a8:	d1 f7       	brne	.-12     	; 0x19e <main+0x8>
		medfilter(rand());
	}

	unsigned int median = medfilter(rand());
 1aa:	0e 94 2a 01 	call	0x254	; 0x254 <rand>
 1ae:	0e 94 53 00 	call	0xa6	; 0xa6 <medfilter>
}
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <do_rand>:
 1bc:	8f 92       	push	r8
 1be:	9f 92       	push	r9
 1c0:	af 92       	push	r10
 1c2:	bf 92       	push	r11
 1c4:	cf 92       	push	r12
 1c6:	df 92       	push	r13
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
 1d2:	68 81       	ld	r22, Y
 1d4:	79 81       	ldd	r23, Y+1	; 0x01
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	9b 81       	ldd	r25, Y+3	; 0x03
 1da:	61 15       	cp	r22, r1
 1dc:	71 05       	cpc	r23, r1
 1de:	81 05       	cpc	r24, r1
 1e0:	91 05       	cpc	r25, r1
 1e2:	21 f4       	brne	.+8      	; 0x1ec <do_rand+0x30>
 1e4:	64 e2       	ldi	r22, 0x24	; 36
 1e6:	79 ed       	ldi	r23, 0xD9	; 217
 1e8:	8b e5       	ldi	r24, 0x5B	; 91
 1ea:	97 e0       	ldi	r25, 0x07	; 7
 1ec:	2d e1       	ldi	r18, 0x1D	; 29
 1ee:	33 ef       	ldi	r19, 0xF3	; 243
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	0e 94 3a 01 	call	0x274	; 0x274 <__divmodsi4>
 1f8:	49 01       	movw	r8, r18
 1fa:	5a 01       	movw	r10, r20
 1fc:	9b 01       	movw	r18, r22
 1fe:	ac 01       	movw	r20, r24
 200:	a7 ea       	ldi	r26, 0xA7	; 167
 202:	b1 e4       	ldi	r27, 0x41	; 65
 204:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__muluhisi3>
 208:	6b 01       	movw	r12, r22
 20a:	7c 01       	movw	r14, r24
 20c:	ac ee       	ldi	r26, 0xEC	; 236
 20e:	b4 ef       	ldi	r27, 0xF4	; 244
 210:	a5 01       	movw	r20, r10
 212:	94 01       	movw	r18, r8
 214:	0e 94 67 01 	call	0x2ce	; 0x2ce <__mulohisi3>
 218:	dc 01       	movw	r26, r24
 21a:	cb 01       	movw	r24, r22
 21c:	8c 0d       	add	r24, r12
 21e:	9d 1d       	adc	r25, r13
 220:	ae 1d       	adc	r26, r14
 222:	bf 1d       	adc	r27, r15
 224:	b7 ff       	sbrs	r27, 7
 226:	03 c0       	rjmp	.+6      	; 0x22e <do_rand+0x72>
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	a1 09       	sbc	r26, r1
 22c:	b0 48       	sbci	r27, 0x80	; 128
 22e:	88 83       	st	Y, r24
 230:	99 83       	std	Y+1, r25	; 0x01
 232:	aa 83       	std	Y+2, r26	; 0x02
 234:	bb 83       	std	Y+3, r27	; 0x03
 236:	9f 77       	andi	r25, 0x7F	; 127
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	cf 90       	pop	r12
 244:	bf 90       	pop	r11
 246:	af 90       	pop	r10
 248:	9f 90       	pop	r9
 24a:	8f 90       	pop	r8
 24c:	08 95       	ret

0000024e <rand_r>:
 24e:	0e 94 de 00 	call	0x1bc	; 0x1bc <do_rand>
 252:	08 95       	ret

00000254 <rand>:
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	0e 94 de 00 	call	0x1bc	; 0x1bc <do_rand>
 25c:	08 95       	ret

0000025e <srand>:
 25e:	a0 e0       	ldi	r26, 0x00	; 0
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 266:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 26a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 26e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 272:	08 95       	ret

00000274 <__divmodsi4>:
 274:	05 2e       	mov	r0, r21
 276:	97 fb       	bst	r25, 7
 278:	1e f4       	brtc	.+6      	; 0x280 <__divmodsi4+0xc>
 27a:	00 94       	com	r0
 27c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <__negsi2>
 280:	57 fd       	sbrc	r21, 7
 282:	07 d0       	rcall	.+14     	; 0x292 <__divmodsi4_neg2>
 284:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__udivmodsi4>
 288:	07 fc       	sbrc	r0, 7
 28a:	03 d0       	rcall	.+6      	; 0x292 <__divmodsi4_neg2>
 28c:	4e f4       	brtc	.+18     	; 0x2a0 <__divmodsi4_exit>
 28e:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__negsi2>

00000292 <__divmodsi4_neg2>:
 292:	50 95       	com	r21
 294:	40 95       	com	r20
 296:	30 95       	com	r19
 298:	21 95       	neg	r18
 29a:	3f 4f       	sbci	r19, 0xFF	; 255
 29c:	4f 4f       	sbci	r20, 0xFF	; 255
 29e:	5f 4f       	sbci	r21, 0xFF	; 255

000002a0 <__divmodsi4_exit>:
 2a0:	08 95       	ret

000002a2 <__negsi2>:
 2a2:	90 95       	com	r25
 2a4:	80 95       	com	r24
 2a6:	70 95       	com	r23
 2a8:	61 95       	neg	r22
 2aa:	7f 4f       	sbci	r23, 0xFF	; 255
 2ac:	8f 4f       	sbci	r24, 0xFF	; 255
 2ae:	9f 4f       	sbci	r25, 0xFF	; 255
 2b0:	08 95       	ret

000002b2 <__muluhisi3>:
 2b2:	0e 94 8e 01 	call	0x31c	; 0x31c <__umulhisi3>
 2b6:	a5 9f       	mul	r26, r21
 2b8:	90 0d       	add	r25, r0
 2ba:	b4 9f       	mul	r27, r20
 2bc:	90 0d       	add	r25, r0
 2be:	a4 9f       	mul	r26, r20
 2c0:	80 0d       	add	r24, r0
 2c2:	91 1d       	adc	r25, r1
 2c4:	11 24       	eor	r1, r1
 2c6:	08 95       	ret

000002c8 <__mulshisi3>:
 2c8:	b7 ff       	sbrs	r27, 7
 2ca:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__muluhisi3>

000002ce <__mulohisi3>:
 2ce:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__muluhisi3>
 2d2:	82 1b       	sub	r24, r18
 2d4:	93 0b       	sbc	r25, r19
 2d6:	08 95       	ret

000002d8 <__udivmodsi4>:
 2d8:	a1 e2       	ldi	r26, 0x21	; 33
 2da:	1a 2e       	mov	r1, r26
 2dc:	aa 1b       	sub	r26, r26
 2de:	bb 1b       	sub	r27, r27
 2e0:	fd 01       	movw	r30, r26
 2e2:	0d c0       	rjmp	.+26     	; 0x2fe <__udivmodsi4_ep>

000002e4 <__udivmodsi4_loop>:
 2e4:	aa 1f       	adc	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	ee 1f       	adc	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	a2 17       	cp	r26, r18
 2ee:	b3 07       	cpc	r27, r19
 2f0:	e4 07       	cpc	r30, r20
 2f2:	f5 07       	cpc	r31, r21
 2f4:	20 f0       	brcs	.+8      	; 0x2fe <__udivmodsi4_ep>
 2f6:	a2 1b       	sub	r26, r18
 2f8:	b3 0b       	sbc	r27, r19
 2fa:	e4 0b       	sbc	r30, r20
 2fc:	f5 0b       	sbc	r31, r21

000002fe <__udivmodsi4_ep>:
 2fe:	66 1f       	adc	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	88 1f       	adc	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	1a 94       	dec	r1
 308:	69 f7       	brne	.-38     	; 0x2e4 <__udivmodsi4_loop>
 30a:	60 95       	com	r22
 30c:	70 95       	com	r23
 30e:	80 95       	com	r24
 310:	90 95       	com	r25
 312:	9b 01       	movw	r18, r22
 314:	ac 01       	movw	r20, r24
 316:	bd 01       	movw	r22, r26
 318:	cf 01       	movw	r24, r30
 31a:	08 95       	ret

0000031c <__umulhisi3>:
 31c:	a2 9f       	mul	r26, r18
 31e:	b0 01       	movw	r22, r0
 320:	b3 9f       	mul	r27, r19
 322:	c0 01       	movw	r24, r0
 324:	a3 9f       	mul	r26, r19
 326:	70 0d       	add	r23, r0
 328:	81 1d       	adc	r24, r1
 32a:	11 24       	eor	r1, r1
 32c:	91 1d       	adc	r25, r1
 32e:	b2 9f       	mul	r27, r18
 330:	70 0d       	add	r23, r0
 332:	81 1d       	adc	r24, r1
 334:	11 24       	eor	r1, r1
 336:	91 1d       	adc	r25, r1
 338:	08 95       	ret

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
